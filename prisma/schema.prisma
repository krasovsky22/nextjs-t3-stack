// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-snpx prisma migrate devchema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime @map("expiresAt")
    user         User     @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model User {
    id               String            @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    email            String?           @unique
    emailVerified    DateTime?         @map("verifiedAt")
    createdAt        DateTime          @default(now())
    image            String?
    accounts         Account[]
    sessions         Session[]
    todos            Todo[]

    workouts Workout[]
    workoutExercises WorkoutExercise[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Todo {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    description String
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("todos")
}

model MuscleGroup {
    id                       String     @id @default(auto()) @map("_id") @db.ObjectId
    name                     String     @unique
    createdAt                DateTime   @default(now())
    primaryMuscleExerciseIds String[]   @db.ObjectId
    primaryMuscleExercises   Exercise[] @relation(name: "primary", fields: [primaryMuscleExerciseIds], references: [id])

    secondaryMuscleExerciseIds String[]   @db.ObjectId
    secondaryMuscleExercises   Exercise[] @relation(name: "secondary", fields: [secondaryMuscleExerciseIds], references: [id])

    @@map("muscle_groups")
}

model Exercise {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    name         String   @unique
    type         String
    workoutTypes String[]
    force        String
    youtubeLink  String
    createdAt    DateTime @default(now())

    primaryMuscleGroupIds String[]      @db.ObjectId
    primaryMuscles        MuscleGroup[] @relation(name: "primary", fields: [primaryMuscleGroupIds], references: [id])

    secondaryMuscleGroupIds String[]      @db.ObjectId
    secondaryMuscles        MuscleGroup[] @relation(name: "secondary", fields: [secondaryMuscleGroupIds], references: [id])

    workoutExercises WorkoutExercise[]

    @@map("exercies")
}

model Workout {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    createdAt   DateTime @default(now())
    workoutDate DateTime @default(now()) @unique

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    workoutExercises WorkoutExercise[]
}

model WorkoutExercise {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId


    workoutExerciseSets WorkoutExerciseSet[]

    workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId String   @db.ObjectId

    exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId String   @db.ObjectId

    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    @@map("workout_exercises")
}

model WorkoutExerciseSet {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    weight     Float
    weightType String
    repeats    Int

    workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
    workoutExerciseId String          @db.ObjectId

    @@map("workout_exercise_sets")
}
